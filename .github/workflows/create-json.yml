name: Generate kinesis_firehose.json

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: "Boolean to deploy resources"
        required: true
        default: true
        type: boolean
      stream_name:
        description: "Name of the firehose stream"
        required: true
        default: ""
      s3_bucket_arn:
        description: "ARN of the S3 bucket"
        required: true
        default: ""
      s3_prefix:
        description: "S3 prefix"
        required: true
        default: ""
      buffer_size:
        description: "Buffer size in MBs"
        required: true
        default: 5
        type: number
      buffer_interval:
        description: "Buffer interval in seconds"
        required: true
        default: 300
        type: number
      role_arn:
        description: "IAM role ARN"
        required: true
        default: ""
      kms_key_arn:
        description: "KMS key ARN for S3 bucket encryption"
        required: true
        default: ""
      compression_format:
        description: "Compression format for S3"
        required: true
        default: "GZIP"
      sse_kms_key_type:
        description: "SSE KMS key type"
        required: true
        default: "AWS_OWNED_CMK"

jobs:
  generate_json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate kinesis_firehose.json
        run: |
          echo '{
            "deploy": ${{
              github.event.inputs.deploy
            }},
            "stream_name": "${{
              github.event.inputs.stream_name
            }}",
            "s3_bucket_arn": "${{
              github.event.inputs.s3_bucket_arn
            }}",
            "s3_prefix": "${{
              github.event.inputs.s3_prefix
            }}",
            "buffer_size": ${{
              github.event.inputs.buffer_size
            }},
            "buffer_interval": ${{
              github.event.inputs.buffer_interval
            }},
            "role_arn": "${{
              github.event.inputs.role_arn
            }}",
            "kms_key_arn": "${{
              github.event.inputs.kms_key_arn
            }}",
            "compression_format": "${{
              github.event.inputs.compression_format
            }}",
            "sse_kms_key_type": "${{
              github.event.inputs.sse_kms_key_type
            }}"
          }' > ./kinesis_firehose.json

      - name: Commit and Push kinesis_firehose.json
        uses: actions/github-script@v6
        with:
         script: |
          const fs = require('fs');
          const content = fs.readFileSync('kinesis_firehose.json', 'utf8');

          const { data: refData } = await github.git.getRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'heads/master'
          });

          const shaLatestCommit = refData.object.sha;

          const { data: commitData } = await github.repos.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: shaLatestCommit
          });

          const shaBaseTree = commitData.commit.tree.sha;

          const { data: blobData } = await github.git.createBlob({
            owner: context.repo.owner,
            repo: context.repo.repo,
            content: content,
            encoding: 'utf-8'
          });

          const { data: newTree } = await github.git.createTree({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base_tree: shaBaseTree,
            tree: [
              {
                path: 'kinesis_firehose.json',
                mode: '100644',
                type: 'blob',
                sha: blobData.sha
              }
            ]
          });

          const { data: newCommit } = await github.git.createCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            message: 'Add generated kinesis_firehose.json',
            tree: newTree.sha,
            parents: [shaLatestCommit]
          });

          await github.git.updateRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'heads/master',
            sha: newCommit.sha
          });